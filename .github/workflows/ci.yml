name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0 # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.1.0
      with:
        versionSpec: '5.x'
    
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v4.1.0
      id: gitversion
      with:
        useConfigFile: true
    
    - name: Display Version
      run: |
        echo "NuGet Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "Assembly Version: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "Branch Name: ${{ steps.gitversion.outputs.branchName }}"
        echo "Commit SHA: ${{ steps.gitversion.outputs.sha }}"
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore CloakId.sln
    
    - name: Build solution
      run: dotnet build CloakId.sln --no-restore --configuration Release
      env:
        VersionPrefix: ${{ steps.gitversion.outputs.majorMinorPatch }}
        VersionSuffix: ${{ steps.gitversion.outputs.preReleaseTag }}
        Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
    
    - name: Run tests with coverage
      run: dotnet test CloakId.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
    
    - name: Prepare coverage reports
      run: |
        # Find the coverage file and copy it to a standard location
        find ./TestResults -name "coverage.cobertura.xml" -exec cp {} ./TestResults/coverage.xml \;
        ls -la ./TestResults/
    
    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: ./TestResults/coverage.xml,./TestResults/**/coverage.cobertura.xml
    #     flags: unittests
    #     name: codecov-umbrella
    #     fail_ci_if_error: false
    #     verbose: true
    #     # Tokenless upload for public repositories
    #     use_oidc: true
    
    - name: Pack NuGet packages
      run: |
        dotnet pack src/CloakId/CloakId.csproj --no-build --configuration Release --output ./packages
        dotnet pack src/CloakId.AspNetCore/CloakId.AspNetCore.csproj --no-build --configuration Release --output ./packages
        dotnet pack src/CloakId.Sqids/CloakId.Sqids.csproj --no-build --configuration Release --output ./packages
      env:
        VersionPrefix: ${{ steps.gitversion.outputs.majorMinorPatch }}
        VersionSuffix: ${{ steps.gitversion.outputs.preReleaseTag }}
        Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        retention-days: 30
    
    - name: Publish to NuGet (Pre-release)
      if: github.ref == 'refs/heads/main'
      run: |
        dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    
    # - name: Publish to GitHub Packages (Pre-release)
    #   if: github.ref == 'refs/heads/main'
    #   run: |
    #     dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/Saraphite/index.json --skip-duplicate
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore CloakId.sln
    
    - name: Check format
      run: dotnet format CloakId.sln --verify-no-changes --verbosity diagnostic
